#      Markingpy automatic grading tool for Python code.
#      Copyright (C) 2019 University of East Anglia
#
#      This program is free software: you can redistribute it and/or modify
#      it under the terms of the GNU General Public License as published by
#      the Free Software Foundation, either version 3 of the License, or
#      (at your option) any later version.
#
#      This program is distributed in the hope that it will be useful,
#      but WITHOUT ANY WARRANTY; without even the implied warranty of
#      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#      GNU General Public License for more details.
#
#      You should have received a copy of the GNU General Public License
#      along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
"""
Syntax checking interface.
"""

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from pylint.lint import PyLinter
from pylint.reporters.text import TextReporter

if TYPE_CHECKING:
    import submission

class CodeStyleReportABC(ABC):
    """
    Abstract base class for syntax reports.
    """


    @abstractmethod
    def get_text_report(self):
        pass

    @abstractmethod
    def get_stats(self):
        pass

    @abstractmethod
    def get_score(self):
        pass


class CodeStyleCheckerABC(ABC):
    """
    Abstract base class for code style checkers (linter) interface.)
    """

    @abstractmethod
    def check(self, sub: 'submission.Submission') -> CodeStyleReportABC:
        pass


class PyLintReport(CodeStyleReportABC):
    """
    Report generated by PyLintChecker
    """

    def __init__(self):
        self.content = []
        self.stats = None



class PyLintChecker(CodeStyleCheckerABC):
    """
    Code style checker using PyLint as a backend
    """

    def __init__(self, report_class=PyLintReport):
        self.report_class = report_class
        self._plugins = None

    def create_new_linter(self, report):
        linter = PyLinter(reporter=TextReporter(report))
        linter.load_default_plugins()
        linter.load_plugin_modules(self._plugins)
        return linter

    def check(self, submission):
        report = self.report_class()
        linter = self.create_new_linter(report)
        linter.check()

        return report
